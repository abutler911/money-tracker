<div class="container mt-5">
  <div class="row mb-4">
    <div class="col-4">
      <form action="/logout" method="GET">
        <button type="submit" class="btn btn-primary">Logout</button>
      </form>
    </div>
    <div class="col-4">
      <% if (user.isAdmin) { %>
      <form action="/admin" method="GET">
        <button type="submit" class="btn btn-primary">Admin</button>
      </form>
      <% } %>
    </div>
    <div class="col-4">
      <button id="dark-mode-toggle" class="btn btn-primary">Dark</button>
    </div>
  </div>
  <div class="row">
    <div class="col-12">
      <% // Capitalize the first letter of the user's name %> <% const
      capitalizedUserName = user.name.charAt(0).toUpperCase() +
      user.name.slice(1); %>
      <h1 class="fs-1">
        Hi, <%= capitalizedUserName %>! <br />
        Welcome to PennyPal!
      </h1>
    </div>
    <hr />
    <h2 class="text-center">Pending Income</h2>
    <ul>
      <li class="text-start">
        Hero Consulting: <span class="text-end">$7,000</span>
      </li>
      <li class="text-start">
        SkyWest Bonus (June): <span class="text-end">$10,000</span>
      </li>
      <li class="text-start">Lawsuit: <span class="text-end">$8,000</span></li>
    </ul>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="savings">
        <h2 class="category-title">Investment Accounts</h2>
        <h3>
          Total: $<%= getTotalAmount(accounts, 'savings').toLocaleString() %>
        </h3>
        <div class="table-responsive">
          <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col">Account</th>
                <th scope="col">Amount</th>
                <% if (user.isAdmin) { %>
                <th scope="col">Actions</th>
                <% } %>
              </tr>
            </thead>
            <tbody>
              <% const savingsAccounts = accounts.filter(account => account.type
              === 'savings').sort((a, b) => b.amount - a.amount); %> <%
              savingsAccounts.forEach(account => { %>
              <tr>
                <td><%= account.accountName %></td>
                <td>
                  <a
                    href="#"
                    class="amount-link"
                    data-account-id="<%= account._id %>"
                    >$<%= account.amount.toLocaleString() %></a
                  >
                  <input
                    type="number"
                    class="form-control update-amount"
                    data-account-id="<%= account._id %>"
                    style="display: none"
                  />
                </td>
                <% if (user.isAdmin) { %>
                <td>
                  <!-- <button type="button" class="btn btn-primary edit-amount">
                    Edit
                  </button> -->
                  <form
                    action="/delete-account/<%= account._id %>"
                    method="POST"
                  >
                    <button type="submit" class="btn btn-danger">
                      <i class="bi bi-trash3-fill"></i>
                    </button>
                  </form>
                </td>
                <% } %>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="debt">
        <h2 class="category-title">Debt Accounts</h2>
        <h3>
          Total: $<%= getTotalAmount(accounts, 'debt').toLocaleString() %>
        </h3>
        <div class="table-responsive">
          <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col">Account</th>
                <th scope="col">Amount</th>
                <% if (user.isAdmin) { %>
                <th scope="col">Actions</th>
                <% } %>
              </tr>
            </thead>
            <tbody>
              <% const debtAccounts = accounts.filter(account => account.type
              === 'debt').sort((a, b) => b.amount - a.amount); %> <%
              debtAccounts.forEach(account => { %>
              <tr>
                <td><%= account.accountName %></td>
                <td>
                  <a
                    href="#"
                    class="amount-link"
                    data-account-id="<%= account._id %>"
                    >$<%= account.amount.toLocaleString() %></a
                  >
                </td>
                <% if (user.isAdmin) { %>
                <td>
                  <form
                    action="/delete-account/<%= account._id %>"
                    method="POST"
                  >
                    <button type="submit" class="btn btn-danger">
                      <i class="bi bi-trash3-fill"></i>
                    </button>
                  </form>
                </td>
                <% } %>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const amountLinks = document.querySelectorAll(".amount-link");

    amountLinks.forEach((link) => {
      link.addEventListener("click", function (event) {
        event.preventDefault();

        const accountId = this.getAttribute("data-account-id");
        const newAmount = prompt("Enter the new amount:");

        // Check if newAmount is null or empty (user clicked cancel)
        if (newAmount === null || newAmount === "") {
          return; // Exit the function without sending the request
        }

        const formData = new FormData();
        formData.append("accountId", accountId);
        formData.append("newAmount", newAmount);

        const xhr = new XMLHttpRequest();
        xhr.open("POST", "/update-account");
        xhr.setRequestHeader(
          "Content-Type",
          "application/x-www-form-urlencoded"
        );
        xhr.onload = function () {
          if (xhr.status === 200) {
            window.location.href = "/dashboard";
          } else {
            console.error("Error updating account:", xhr.statusText);
            alert("Error updating account. Please try again later.");
          }
        };
        xhr.onerror = function () {
          console.error("Request failed");
          alert("Error updating account. Please try again later.");
        };
        xhr.send(new URLSearchParams(formData));
      });
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const darkModeToggle = document.getElementById("dark-mode-toggle");

    darkModeToggle.addEventListener("click", function () {
      // Toggle dark mode class on the body
      document.body.classList.toggle("dark-mode");

      // Store the user's preference in localStorage
      const isDarkMode = document.body.classList.contains("dark-mode");
      localStorage.setItem("darkMode", isDarkMode);
    });

    // Check if user has a preference for dark mode in localStorage
    const isDarkMode = localStorage.getItem("darkMode") === "true";
    if (isDarkMode) {
      document.body.classList.add("dark-mode");
    }
  });
</script>
